package com.slymask3.buildhelper.item;

import java.util.List;

import net.minecraft.block.Block;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.Vec3;
import net.minecraft.world.World;

import com.slymask3.buildhelper.reference.Reference;
import com.slymask3.buildhelper.utility.Helper;
import com.slymask3.buildhelper.utility.LogHelper;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class ItemTeleportWand extends ItemBase {
	public IIcon icon;
	
	public ItemTeleportWand() {
		super();
	}
	
	@Override
	public void registerIcons(IIconRegister reg) {
		this.icon = reg.registerIcon(Reference.MOD_ID + ":wandTeleport");
	}
	
	@Override
	public IIcon getIconFromDamage(int meta) {
	    return this.icon;
	}
	
	@SideOnly(Side.CLIENT)
	public boolean isFull3D() {
		return true;
	}

	@Override
	public String getUnlocalizedName(ItemStack stack) {
		return this.getUnlocalizedName();// + "_" + state[stack.getItemDamage()];
	}
	
//	public boolean onItemUse(ItemStack is, EntityPlayer player, World world, int par4, int par5, int par6, int par7, float par8, float par9, float par10) {
////		if(is.stackTagCompound == null){
////			is.stackTagCompound = new NBTTagCompound();
////		    LogHelper.info("Wand created. on right click");
////		}
//		
////		MovingObjectPosition mop;
////		Minecraft mc = Minecraft.getMinecraft();
////
////		mop = mc.thePlayer.rayTrace(300, 1);
//		
//		MovingObjectPosition mop = Minecraft.getMinecraft().renderViewEntity.rayTrace(1000, 1.0F);
//		
//		LogHelper.info(mop);
//		
//		if(mop != null) {
//			Helper.tp(world, player, mop.entityHit.posX, mop.entityHit.posY+1, mop.entityHit.posZ);
//        	Helper.msg(player, Colors.b+"Teleported", Colors.b);
//        	return true;
//		}
//		return false;
//		
//
////        MovingObjectPosition mop = this.getMovingObjectPositionFromPlayer(world, player, true);
////
////        if (mop == null) {
////            return false;
////        }
////        else {
////        	Helper.tp(world, player, mop.blockX, mop.blockY+1, mop.blockZ);
////        	Helper.msg(player, Colors.b+"Teleported", Colors.b);
////        	return true;
////        }
//    }
	
//	public void onPlayerStoppedUsing(ItemStack itemStack, World world, EntityPlayer player, int par4) {
//		 float range = 50; // however many blocks away you want to be able to spawn lightning
//		 Vec3 vec3 = player.getLookVec().normalize();
//		 Vec3 vec3a = vec3.addVector(vec3.xCoord * range, vec3.yCoord * range, vec3.zCoord * range);
//		 double targetX = player.posX;
//		 double targetY = player.posY + player.getEyeHeight() - 0.10000000149011612D;
//		 double targetZ = player.posZ;
//		
//		 boolean spawnedLightning = false;
//		 //if (!world.isRemote){
//			 while ((Math.abs(targetX) + Math.abs(targetZ))/2 < (Math.abs(player.posX) + Math.abs(vec3.xCoord * range) + Math.abs(player.posZ)+ Math.abs(vec3.zCoord * range)) / 2 && !spawnedLightning) {
//				 targetX += (vec3a.xCoord);
//				 targetY += (vec3a.yCoord);
//				 targetZ += (vec3a.zCoord);
//				 //if (!world.isAirBlock((int)targetX, (int)targetY, (int)targetZ)) {
//					 //world.addWeatherEffect(new EntityLightningBolt(world, (int)targetX, (int)targetY, (int)targetZ));
//					 Helper.tp(world, player, targetX, targetY+1, targetZ);
//					 //itemStack.damageItem(1, player);
//					 spawnedLightning = true;
//				 //}
//			 }
//		 //}
//	}
//	
//	public ItemStack onItemRightClick(ItemStack itemStack, World world, EntityPlayer player) {
//		player.setItemInUse(itemStack, this.getMaxItemUseDuration(itemStack));
//		return itemStack;
//	}
	
	public void addInformation(ItemStack is, EntityPlayer player, List list, boolean par4) {
		list.add("Teleport with right-click.");
	}
	
	
	
	
	
	
	
	
	
	public boolean onItemUse(ItemStack is, EntityPlayer player, World world, int par4, int par5, int par6, int par7, float par8, float par9, float par10) {
 
  MovingObjectPosition temp = rayTrace(15.0D, 1.0F, player);
 
  if(temp != null){
  int x1 = temp.blockX;
  int y1 = temp.blockY;
  int z1 = temp.blockZ;
			 //if( par3World.getBlock(x1, y1, z1) == Blocks.dirt){
			  world.setBlock(x1, y1, z1, Blocks.air);
			  LogHelper.info(temp);
			 
			  return true;
			 //}
  }
	 return false;
   }
private MovingObjectPosition rayTrace(double distance, float par3, Entity entity) {
 Vec3 vec3d = Vec3.createVectorHelper(entity.posX, entity.posY, entity.posZ);
	    Vec3 vec3d1 = getLook(entity);
	    Vec3 vec3d2 = vec3d.addVector(vec3d1.xCoord * distance, vec3d1.yCoord * distance, vec3d1.zCoord * distance);
	    return entity.worldObj.rayTraceBlocks(vec3d, vec3d2);
}
private Vec3 getLook(Entity entity) {
 float f = MathHelper.cos(-entity.rotationYaw * 0.01745329F - (float)Math.PI);
	    float f2 = MathHelper.sin(-entity.rotationYaw * 0.01745329F - (float)Math.PI);
	    float f4 = -MathHelper.cos(-entity.rotationPitch * 0.01745329F);
	    float f6 = MathHelper.sin(-entity.rotationPitch * 0.01745329F);
	    return Vec3.createVectorHelper(f2 * f4, f6, f * f4);
}
}
